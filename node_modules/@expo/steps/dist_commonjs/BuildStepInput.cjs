"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeBuildStepInputByIdMap = exports.BuildStepInput = exports.BuildStepInputValueTypeName = void 0;
const BuildStepContext_js_1 = require("./BuildStepContext.cjs");
const errors_js_1 = require("./errors.cjs");
const template_js_1 = require("./utils/template.cjs");
var BuildStepInputValueTypeName;
(function (BuildStepInputValueTypeName) {
    BuildStepInputValueTypeName["STRING"] = "string";
    BuildStepInputValueTypeName["BOOLEAN"] = "boolean";
    BuildStepInputValueTypeName["NUMBER"] = "number";
    BuildStepInputValueTypeName["JSON"] = "json";
})(BuildStepInputValueTypeName || (exports.BuildStepInputValueTypeName = BuildStepInputValueTypeName = {}));
class BuildStepInput {
    static createProvider(params) {
        return (ctx, stepDisplayName) => new BuildStepInput(ctx, { ...params, stepDisplayName });
    }
    constructor(ctx, { id, stepDisplayName, allowedValues, defaultValue, required, allowedValueTypeName, }) {
        this.ctx = ctx;
        this.id = id;
        this.stepDisplayName = stepDisplayName;
        this.allowedValues = allowedValues;
        this.defaultValue = defaultValue;
        this.required = required;
        this.allowedValueTypeName = allowedValueTypeName;
    }
    get value() {
        var _a;
        const rawValue = (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
        if (this.required && rawValue === undefined) {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" is required but it was not set.`);
        }
        const valueDoesNotRequireInterpolation = rawValue === undefined ||
            typeof rawValue === 'boolean' ||
            typeof rawValue === 'number' ||
            typeof rawValue === 'object';
        if (valueDoesNotRequireInterpolation) {
            const currentTypeName = typeof rawValue === 'object' ? BuildStepInputValueTypeName.JSON : typeof rawValue;
            if (currentTypeName !== this.allowedValueTypeName && rawValue !== undefined) {
                throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" must be of type "${this.allowedValueTypeName}".`);
            }
            return rawValue;
        }
        else {
            const valueInterpolatedWithGlobalContext = this.ctx.interpolate(rawValue);
            const valueInterpolatedWithOutputsAndGlobalContext = (0, template_js_1.interpolateWithOutputs)(valueInterpolatedWithGlobalContext, (path) => { var _a; return (_a = this.ctx.getStepOutputValue(path)) !== null && _a !== void 0 ? _a : ''; });
            return this.parseInputValueToAllowedType(valueInterpolatedWithOutputsAndGlobalContext);
        }
    }
    get rawValue() {
        var _a;
        return (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
    }
    set(value) {
        if (this.required && value === undefined) {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" is required.`);
        }
        this._value = value;
        return this;
    }
    isValueOneOfAllowedValues() {
        var _a;
        const value = (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
        if (this.allowedValues === undefined || value === undefined) {
            return true;
        }
        return this.allowedValues.includes(value);
    }
    isRawValueStepOrContextReference() {
        return (typeof this.rawValue === 'string' &&
            !!template_js_1.BUILD_STEP_OR_BUILD_GLOBAL_CONTEXT_REFERENCE_REGEX.exec(this.rawValue));
    }
    serialize() {
        return {
            id: this.id,
            stepDisplayName: this.stepDisplayName,
            defaultValue: this.defaultValue,
            allowedValues: this.allowedValues,
            allowedValueTypeName: this.allowedValueTypeName,
            required: this.required,
            value: this._value,
            ctx: this.ctx.serialize(),
        };
    }
    static deserialize(serializedInput, logger) {
        const deserializedContext = BuildStepContext_js_1.BuildStepGlobalContext.deserialize(serializedInput.ctx, logger);
        const input = new BuildStepInput(deserializedContext, {
            id: serializedInput.id,
            stepDisplayName: serializedInput.stepDisplayName,
            defaultValue: serializedInput.defaultValue,
            allowedValues: serializedInput.allowedValues,
            allowedValueTypeName: serializedInput.allowedValueTypeName,
            required: serializedInput.required,
        });
        input._value = serializedInput.value;
        return input;
    }
    parseInputValueToAllowedType(value) {
        if (this.allowedValueTypeName === BuildStepInputValueTypeName.STRING) {
            return value;
        }
        else if (this.allowedValueTypeName === BuildStepInputValueTypeName.NUMBER) {
            return this.parseInputValueToNumber(value);
        }
        else if (this.allowedValueTypeName === BuildStepInputValueTypeName.BOOLEAN) {
            return this.parseInputValueToBoolean(value);
        }
        else {
            return this.parseInputValueToObject(value);
        }
    }
    parseInputValueToNumber(value) {
        const numberValue = Number(value);
        if (Number.isNaN(numberValue)) {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" must be of type "${this.allowedValueTypeName}".`);
        }
        return numberValue;
    }
    parseInputValueToBoolean(value) {
        if (value === 'true') {
            return true;
        }
        else if (value === 'false') {
            return false;
        }
        else {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" must be of type "${this.allowedValueTypeName}".`);
        }
    }
    parseInputValueToObject(value) {
        try {
            return JSON.parse(value);
        }
        catch (e) {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" must be of type "${this.allowedValueTypeName}".`, {
                cause: e,
            });
        }
    }
}
exports.BuildStepInput = BuildStepInput;
function makeBuildStepInputByIdMap(inputs) {
    if (inputs === undefined) {
        return {};
    }
    return inputs.reduce((acc, input) => {
        acc[input.id] = input;
        return acc;
    }, {});
}
exports.makeBuildStepInputByIdMap = makeBuildStepInputByIdMap;
//# sourceMappingURL=BuildStepInput.js.map