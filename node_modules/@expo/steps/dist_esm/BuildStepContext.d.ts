import { bunyan } from '@expo/logger';
import { BuildStep, SerializedBuildStepOutputAccessor } from './BuildStep.js';
import { BuildRuntimePlatform } from './BuildRuntimePlatform.js';
import { BuildStepEnv } from './BuildStepEnv.js';
interface SerializedExternalBuildContextProvider {
    projectSourceDirectory: string;
    projectTargetDirectory: string;
    defaultWorkingDirectory: string;
    buildLogsDirectory: string;
    runtimePlatform: BuildRuntimePlatform;
    staticContext: Record<string, any>;
    env: BuildStepEnv;
}
export interface ExternalBuildContextProvider {
    readonly projectSourceDirectory: string;
    readonly projectTargetDirectory: string;
    readonly defaultWorkingDirectory: string;
    readonly buildLogsDirectory: string;
    readonly runtimePlatform: BuildRuntimePlatform;
    readonly logger: bunyan;
    readonly staticContext: () => Record<string, any>;
    readonly env: BuildStepEnv;
    updateEnv(env: BuildStepEnv): void;
}
export interface SerializedBuildStepGlobalContext {
    stepsInternalBuildDirectory: string;
    stepById: Record<string, SerializedBuildStepOutputAccessor>;
    provider: SerializedExternalBuildContextProvider;
    skipCleanup: boolean;
}
export declare class BuildStepGlobalContext {
    private readonly provider;
    readonly skipCleanup: boolean;
    stepsInternalBuildDirectory: string;
    readonly runtimePlatform: BuildRuntimePlatform;
    readonly baseLogger: bunyan;
    private stepById;
    constructor(provider: ExternalBuildContextProvider, skipCleanup: boolean);
    get projectSourceDirectory(): string;
    get projectTargetDirectory(): string;
    get defaultWorkingDirectory(): string;
    get buildLogsDirectory(): string;
    get env(): BuildStepEnv;
    get staticContext(): Record<string, any>;
    updateEnv(updatedEnv: BuildStepEnv): void;
    registerStep(step: BuildStep): void;
    getStepOutputValue(path: string): string | undefined;
    interpolate(value: string): string;
    stepCtx(options: {
        logger: bunyan;
        workingDirectory: string;
    }): BuildStepContext;
    serialize(): SerializedBuildStepGlobalContext;
    static deserialize(serialized: SerializedBuildStepGlobalContext, logger: bunyan): BuildStepGlobalContext;
}
export interface SerializedBuildStepContext {
    workingDirectory: string;
    global: SerializedBuildStepGlobalContext;
}
export declare class BuildStepContext {
    private readonly ctx;
    readonly logger: bunyan;
    readonly workingDirectory: string;
    constructor(ctx: BuildStepGlobalContext, { logger, workingDirectory, }: {
        logger: bunyan;
        workingDirectory: string;
    });
    get global(): BuildStepGlobalContext;
    serialize(): SerializedBuildStepContext;
    static deserialize(serialized: SerializedBuildStepContext, logger: bunyan): BuildStepContext;
}
export {};
